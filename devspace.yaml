version: v2beta1
name: rabbitmq-debug

# This is a list of `pipelines` that DevSpace can execute (you can define your own)
pipelines:
  # This is the pipeline for the main command: `devspace dev` (or `devspace run-pipeline dev`)
  dev:
    run: |-
      run_dependencies --all       # 1. Deploy any projects this project needs (see "dependencies")
      ensure_pull_secrets --all    # 2. Ensure pull secrets
      create_deployments --all     # 3. Deploy Helm charts and manifests specfied as "deployments"
      start_dev --all                # 4. Start dev mode "app" (see "dev" section)
  # You can run this pipeline via `devspace deploy` (or `devspace run-pipeline deploy`)
  deploy:
    run: |-
      run_dependencies --all                            # 1. Deploy any projects this project needs (see "dependencies")
      ensure_pull_secrets --all                         # 2. Ensure pull secrets
      build_images --all -t $(git describe --always)    # 3. Build, tag (git commit hash) and push all images (see "images")
      create_deployments --all                          # 4. Deploy Helm charts and manifests specfied as "deployments"

# This is a list of `images` that DevSpace can build for this project
# We recommend to skip image building during development (devspace dev) as much as possible
images:
  app:
    image: my-image-registry.tld/username/app
    dockerfile: ./Dockerfile

# This is a list of `deployments` that DevSpace can create for this project
deployments:
  app:
    # This deployment uses `helm` but you can also define `kubectl` deployments or kustomizations
    helm:
      # We are deploying this project with the Helm chart you provided
      chart:
        name: component-chart
        repo: https://charts.devspace.sh
      # Under `values` we can define the values for this Helm chart used during `helm install/upgrade`
      # You may also use `valuesFiles` to load values from files, e.g. valuesFiles: ["values.yaml"]
      values:
        containers:
          - image: my-image-registry.tld/username/app
        service:
          name: app
          ports:
            - port: 8886
      disableDependencyUpdate: false

  store-rabbitmq:
    helm:
      disableDependencyUpdate: false
      values:
        containers:
          - image: bitnami/rabbitmq
            env:
              - name: RABBITMQ_USERNAME
                value: "rabbitmq-debug"
              - name: RABBITMQ_PASSWORD
                value: "rabbitmq-debug"
              - name: RABBITMQ_VHOST
                value: "/"
              - name: RABBITMQ_DISK_FREE_ABSOLUTE_LIMIT
                value: 1GB
            name: store-rabbitmq

            resources:
              limit:
                cpu: 1
                memory: 1024Mi
              requests:
                cpu: 100m
                memory: 256Mi
            volumeMounts:
              - containerPath: /bitnami
                volume:
                  name: rabbitmq-data
                  readOnly: false
        securityContext:
          fsGroup: 1001
        service:
          name: store-rabbitmq
          ports:
            - port: 5672
            - port: 80
        volumes:
          - name: rabbitmq-data
            size: 5Gi

# This is a list of `dev` containers that are based on the containers created by your deployments
dev:
  ports-0:
    imageSelector: bitnami/rabbitmq
    ports:
      - port: "15672"
  app:
    # Search for the container that runs this image
    imageSelector: my-image-registry.tld/username/app
    # Replace the container image with this dev-optimized image (allows to skip image building during development)
    devImage: denoland/deno:1.26.0

    command: ["deno", "run", "--allow-net", "--watch", "app/app/main.ts"]
    # Sync files between the local filesystem and the development container
    sync:
      - path: .:/app
        startContainer: true
    # Forward the following ports to be able access your application via localhost
    ports:
      - port: "9229"
      - port: "8886"
